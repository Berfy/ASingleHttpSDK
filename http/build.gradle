apply plugin: 'com.android.library'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
//                cppFlags "-std=c++11"
                // 生成多个版本的so文件
                abiFilters 'armeabi', 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    /*网络库*/
//    api 'com.squareup.okhttp3:okhttp:3.9.0'
//    api 'com.squareup.okhttp3:logging-interceptor:3.9.0'
//    api 'com.google.code.gson:gson:2.8.0'

    /*提供的Module*/
//    api 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    /*RXJAVA*/
//    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
//    api 'io.reactivex.rxjava2:rxjava:2.1.0'
}

//task to delete the old jar
task deleteOldJar(type: Delete) {
    delete 'release/httpSdk.jar'
}

//task to export contents as jar
//task exportJar(type: Copy) {
//    from('build/intermediates/intermediate-jars/release/')
//    into('release/')
//    include('classes.jar')
//    ///Rename the jar
//    rename('classes.jar', 'httpSdk.jar')
//}
//
//exportJar.dependsOn(deleteOldJar, build)
//dependsOn 可根据实际需要增加或更改

task makeJar(type: proguard.gradle.ProGuardTask, dependsOn: "build") {
    // 未混淆的jar路径
    injars 'build/intermediates/packaged-classes/release/classes.jar'
    // 混淆后的jar输出路径
    outjars 'build/outputs/httpSDK.jar'
    // 混淆协议
    configuration 'proguard-rules.pro'
}
